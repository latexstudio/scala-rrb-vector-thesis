\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Radix Balanced Tree Structure\relax }}{4}{figure.caption.17}
\contentsline {figure}{\numberline {2.2}{\ignorespaces Radix Balanced Tree\relax }}{6}{figure.caption.55}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Relaxed radix example\relax }}{7}{figure.caption.56}
\contentsline {figure}{\numberline {2.4}{\ignorespaces Concatenation example with blocks of size 4: Rebalancing level 0\relax }}{7}{figure.caption.64}
\contentsline {figure}{\numberline {2.5}{\ignorespaces Concatenation example with blocks of size 4: Rebalancing level 1\relax }}{8}{figure.caption.65}
\contentsline {figure}{\numberline {2.6}{\ignorespaces Concatenation example with blocks of size 4: Rebalancing level 2\relax }}{8}{figure.caption.66}
\contentsline {figure}{\numberline {2.7}{\ignorespaces Concatenation example with blocks of size 4: Rebalancing level 3\relax }}{8}{figure.caption.67}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Accessing element at index 526843 in a tree of depth 5. Empty nodes represent collapses subtrees.\relax }}{11}{figure.caption.79}
\contentsline {figure}{\numberline {3.2}{\ignorespaces Displays\relax }}{12}{figure.caption.90}
\contentsline {figure}{\numberline {3.3}{\ignorespaces Radix Balanced Tree Transient state\relax }}{13}{figure.caption.93}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Radix Balanced Tree\relax }}{13}{figure.caption.95}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces Time to execute 10k apply operations on sequential indices.\relax }}{15}{figure.caption.107}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Time to execute 10k apply operations on random indices.\relax }}{16}{figure.caption.108}
\contentsline {figure}{\numberline {4.3}{\ignorespaces Time to execute 10k apply operations on sequential indices. Comparing performances for different block sizes and different implementation of the concatenation inner branch rebalancing (Complete/Quick).\relax }}{16}{figure.caption.109}
\contentsline {figure}{\numberline {4.4}{\ignorespaces Execution time for a concatenation operation on two vectors. In theory (and in practice) Vector concatenation is $O(left + right)$ and the rrbVector concatenation operation is $O(log_{32}(left + right))$.\relax }}{17}{figure.caption.111}
\contentsline {figure}{\numberline {4.5}{\ignorespaces Time to execute 256 append operations. This shows the amortized cost of the append operation.\relax }}{17}{figure.caption.113}
\contentsline {figure}{\numberline {4.6}{\ignorespaces Time to execute 256 append operations. This shows the amortized cost of the append operation.\relax }}{18}{figure.caption.114}
\contentsline {figure}{\numberline {4.7}{\ignorespaces Time to execute 256 append operations. This shows the amortized cost of the append operation. Comparing performances for different block sizes and different implementation of the concatenation inner branch rebalancing (Complete/Quick).\relax }}{18}{figure.caption.115}
\contentsline {figure}{\numberline {4.8}{\ignorespaces Time to execute 256 prepend operations. This shows the amortized cost of the prepend operation.\relax }}{19}{figure.caption.117}
\contentsline {figure}{\numberline {4.9}{\ignorespaces Time to execute 256 prepend operations. This shows the amortized cost of the append operation. Comparing performances for different block sizes and different implementation of the concatenation inner branch rebalancing (Complete/Quick).\relax }}{20}{figure.caption.118}
\contentsline {figure}{\numberline {4.10}{\ignorespaces Execution time of take and drop.\relax }}{21}{figure.caption.120}
\contentsline {figure}{\numberline {4.11}{\ignorespaces Excecution time to iterate through all the elements of the vector.\relax }}{22}{figure.caption.122}
\contentsline {figure}{\numberline {4.12}{\ignorespaces Excecution time to iterate through all the elements of the vector. Comparing performances for different block sizes and different implementation of the concatenation inner branch rebalancing (Complete/Quick).\relax }}{23}{figure.caption.123}
\contentsline {figure}{\numberline {4.13}{\ignorespaces Execution time to build a vector of a given size.\relax }}{24}{figure.caption.125}
\contentsline {figure}{\numberline {4.14}{\ignorespaces Execution time to build a vector of a given size. Comparing performances for different block sizes.\relax }}{25}{figure.caption.126}
\contentsline {figure}{\numberline {4.15}{\ignorespaces Benchmark on map and parallel map using the function (\textsc {x=>x}) to show the difference time used in the framework. This time represents the time spent in the splitters and combiners of the parallel collection (iterator and builder for the sequential version).\relax }}{25}{figure.caption.128}
\contentsline {figure}{\numberline {4.16}{\ignorespaces Benchmark on map and parallel map using the function (\textsc {x=>x}) to show the difference time used in the framework. This time represents the time spent in the splitters and combiners of the parallel collection.\relax }}{26}{figure.caption.129}
\contentsline {figure}{\numberline {4.17}{\ignorespaces Memory Footprint\relax }}{27}{figure.caption.131}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
